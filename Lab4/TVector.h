#pragma once
class TVector {
public:
	virtual double getLength() = 0;
	virtual double getElem(int) = 0;
	virtual bool isParalellTo(TVector&) = 0;
	virtual bool isPerpendicularTo(TVector&) = 0;
	virtual void operator+=(TVector&) = 0;
};

// За умовою віртуальні методи перевірки взаємного разташування повинні бути описані тут.
// В завданні потрібно порівнюавти 2Д вектори з 2Д вектормаи та 3Д вектори з 3Д векторами, але
// тут виникає проблема того, що віртуальні методи описані тут якось повинні мати можливість
// приймати будь-які вектори.
// Тому тут використано TVector& як аргумент.
// Але, після передачі Vector2 чи Vector3 у цей аргумент, він якби перетворюється в тип TVector і
// втрачає доступ до полів і методів що є тільки в ньому. Залишається доступ тільки до полів та
// методів що описані в TVector. Vector2 та Vector3 мають різну кількість полів, тому
// описати їх тут неможливо. Цю проблему вирішує універсальний геттер getElem

